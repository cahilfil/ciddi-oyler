
==================== FINAL INTERFACE ====================
2018-01-08 16:51:07.743908 UTC

interface main:Main 8022
  interface hash: 579e8edbccae1c1d7a300313b115feff
  ABI hash: 3a1699210109575b2031f1f6116a485c
  export-list hash: f771e351bdd1727b0d1a620d7b529ff0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ea51d416926a912995dd3227aef297f8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Euler
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.Environment c9f912affeed5beb387a8c5d2b2c6102
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  base-4.10.1.0:Text.Read 9e862e012b3c71e83cb56fb456188f44
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  Euler b9783e850a3971cf99e9ea6a61ec824a
  exports: 479874449d43153fe4d0aa8bc367295f
  count bd58c195a43ef33ea64417e2b84e8154
  solve c2386f7669f1daaee3a16174ca219242
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
15bcdbf3b679ee83be298485b5a3bbf3
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
32c0d141ea202b26f9fd0fca6b653935
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   []
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main5
                        GHC.Types.False
                        ipv
                   : ds2 ds3
                   -> case Text.Read.readEither8
                             @ GHC.Types.Int
                             (Text.ParserCombinators.ReadP.run
                                @ GHC.Types.Int
                                Main.main4
                                (GHC.List.$w!! @ GHC.Base.String wild 0#)) of wild1 {
                        []
                        -> case Main.main3
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        : x ds
                        -> case ds of wild2 {
                             []
                             -> case x of ww { GHC.Types.I# ww1 ->
                                case Euler.$wsolve ww1 ipv of ds4 { (#,#) ipv2 ipv3 ->
                                GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  (GHC.Types.[] @ GHC.Types.Char)
                                  GHC.Types.True
                                  ipv2 } }
                             : ipv2 ipv3
                             -> case Main.main2
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {} } } } }) -}
311b863c066c5a24e06e5d2a8bb05819
  main10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" problem"#) -}
3409731aa394756f405bd26a0bca8468
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Wow! Apparently, you've solved "#) -}
4061e4ca9d289e3a47d6fcdef4759e76
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ca55ed4e699ba960e2bb8ade6e30eab6
  main2 :: GHC.Types.Int
  {- Strictness: x -}
ffb569146bf9df9d2f5eb75d1ab97a0a
  main3 :: GHC.Types.Int
  {- Strictness: x -}
39a0c338aa348ea615b12bd508832e30
  main4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
d104ea60b632224410ccae45fcced4cd
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main11
                   Main.main6) -}
005e98fb55b867c481bccfe90407b084
  main6 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        1#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                   Main.main7 }) -}
aa107f2b4d7cb8e0ed4b4137ddf94935
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main10
                   Main.main8) -}
299f28c30d5e20fb07ae0dd2c75df28e
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main9) -}
78dd95eca404d81e3a215a1dc644a931
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: (".\n\
                 \\n"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

